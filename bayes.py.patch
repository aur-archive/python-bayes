--- bayes.py	(original)
+++ bayes.py	(refactored)
@@ -1,6 +1,7 @@
 # import sys
 # import time
 from collections import defaultdict as dd
+from functools import reduce
 
 mean = lambda x: sum(x) / len(x)
 
@@ -21,7 +22,7 @@
     def __init__(self, backend=None):
         if backend is None:
             # TODO fillin with a default connection or something
-            raise Exception, 'Hey asshole, supply a backend'
+            raise Exception('Hey asshole, supply a backend')
         self.b = backend
 
     def _calc_feature_score(self, classifier, feature, scale=1):
@@ -81,7 +82,7 @@
         """
         # build up a map of all cats/features/scores
         cat_feature_score_map = dd(dict)
-        for classifier, meta in Classifier.iteritems():
+        for classifier, meta in Classifier.items():
             meta['name'] = classifier
             # TODO figure out if we want to do something more interesting here
             for i, feature in enumerate(Feature):
@@ -104,15 +105,15 @@
 
         # calculate the probabilty distribution
         cat_score_map = dd(float)
-        for classifier, features in cat_feature_score_map.iteritems():
+        for classifier, features in cat_feature_score_map.items():
             # grab currently probability
             p_cat = self.b.get_classification(Classifier.ident, classifier, key)
             # print classifier, p_cat
             # score = p(c) * p(f1|c1) * p(f2|c1), etc for all f in F, for all c in C
-            scores = [f[1] for f in features.iteritems()]
+            scores = [f[1] for f in features.items()]
             cat_score_map[classifier] = (p_cat * reduce(lambda x, y: x * y, scores, 1))
         # return a list of probabilities for each category (between 0 and 1)
-        return sorted(cat_score_map.iteritems(), key=lambda x:x[1], reverse=True)
+        return sorted(iter(cat_score_map.items()), key=lambda x:x[1], reverse=True)
 
     def _calc_classification(self, Classifier, Feature, key, **kwargs):
         scores = self._calc_scores(Classifier, Feature, key, **kwargs)
